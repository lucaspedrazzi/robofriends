{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBondry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterdRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAYeA,G,YAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,yBAAKC,UAAU,uDACb,yBAAMC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,mBACtB,4BAAKC,GACL,2BAAIC,MCeKI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACJC,IAAKJ,EAAOG,GACZV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCEVU,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,yBAAKX,UAAU,OACf,2BACEA,UAAU,0CACVY,KAAK,QACLC,YAAY,+BACZC,SAAUH,MCEDI,G,MARA,SAACC,GACd,OACE,yBAAKhB,UAAU,UACZgB,EAAMC,YCkBEC,E,YArBb,WAAYF,GAAQ,IAAD,8BACjB,4CAAMA,KACDG,MAAQ,CACXC,UAAU,GAHK,E,+EAOHC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SACN,iFAGPG,KAAKP,MAAMC,a,GAjBUQ,aCqDZC,E,YA9Cb,aAAe,IAAD,8BACZ,+CAiBFC,eAAiB,SAAAC,GACf,EAAKJ,SAAS,CAAEd,YAAakB,EAAMC,OAAOC,SAjB1C,EAAKX,MAAQ,CACXf,OAAQ,GACRM,YAAa,IAJH,E,iFAQO,IAAD,OAClBqB,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKX,SAAS,CAAEpB,OAAQ+B,S,+BAOpB,IAAD,EACyBZ,KAAKJ,MAA7Bf,EADD,EACCA,OAAQM,EADT,EACSA,YACV0B,EAAgBhC,EAAOiC,QAAO,SAAAC,GAClC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS9B,EAAY6B,kBAEvD,OAAKnC,EAAOqC,OAIR,kBAAC,WAAD,KACE,6BAASzC,UAAU,MACjB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcY,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUvB,OAAQgC,QATrB,8C,GA5BKX,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.75501443.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n      <img  alt=\"Robots\" src={`https://robohash.org/${id}?size=200x200`}/>\n      <h3>{name}</h3>\n      <p>{email}</p>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n  return (\n    <div>\n      {  \n        robots.map((user, i) => {\n          return (\n            <Card\n        key={robots[i]}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n        />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className=\"pa2\">\n    <input \n      className=\"pa3 tc ba br3 b--green bg-lightest-blue\"\n      type=\"seach\"\n      placeholder=\"Search for your friends here\"\n      onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\nimport '../Components/Scroll.css';\n\nconst Scroll = (props) => {\n  return (\n    <div className=\"scroll\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React,  { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\ncomponentDidCatch(error, info) {\n  this.setState({ hasError: true })\n}\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>There is a error going on here. Come back latter.</h1>\n    }\n    return (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component, Fragment } from \"react\";\nimport \"./App.css\";\nimport \"../Components/SearchBox.css\";\nimport CardList from \"../Components/CardList\";\nimport SearchBox from \"../Components/SearchBox\";\nimport Scroll from \"../Components/Scroll\";\nimport ErrorBoundry from \"../Components/ErrorBondry\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => {\n        return response.json();\n      })\n      .then(users => {\n        this.setState({ robots: users });\n      });\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchfield: event.target.value });\n  };\n  render() {\n    const { robots, searchfield } = this.state;\n    const filterdRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    if (!robots.length) {\n      return <h1>Loading...</h1>;\n    } else {\n      return (\n        <Fragment>\n          <section className=\"tc\">\n            <h1 className=\"f1\">Robofriends</h1>\n            <SearchBox searchChange={this.onSearchChange} />\n            <Scroll>\n              <ErrorBoundry>\n                <CardList robots={filterdRobots} />\n              </ErrorBoundry>\n            </Scroll>\n          </section>\n        </Fragment>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}